package cmd

//eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MDg1NzU5MDAsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTYwODU3NTkwMCwic3ViIjoiYWRtaW4ifQ.nQyhVfOIrjCr8oKJxMKBMlXfHr8JE42KNvunYc3cptA
//eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MDg1NzU5MDAsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTYwODU3NTkwMCwic3ViIjoiYWRtaW4ifQ.nQyhVfOIrjCr8oKJxMKBMlXfHr8JE42KNvunYc3cptA

import (
	"errors"
	"fmt"
	argo "github.com/codefresh-io/argocd-sdk/pkg/api"
	"github.com/codefresh-io/argocd-listener/controller/pkg/clusters"
	"github.com/codefresh-io/argocd-listener/controller/pkg/git"
	"github.com/codefresh-io/argocd-listener/controller/pkg/install"
	"github.com/codefresh-io/argocd-listener/controller/pkg/kube"
	"github.com/codefresh-io/argocd-listener/controller/pkg/logger"
	"github.com/codefresh-io/argocd-listener/controller/pkg/questionnaire"
	"github.com/codefresh-io/go-sdk/pkg/codefresh"
	"github.com/janeczku/go-spinner"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"os"
	"os/user"
	"path"
	"time"
)

var DEFAULT_USER_NAME = "admin"
var FAILED = "FAILED"
var installCmdOptions = install.CmdOptions{}

func retrieveArgoHost(kubeClient kube.Kube) (string, error) {
	var argoHost string
	var err error
	start := time.Now()
	s := spinner.StartNew("Getting argocd ip address...")
	for {
		argoHost, err = kubeClient.GetArgoServerHost()
		if err == nil {
			break
		}
		time.Sleep(3 * time.Second)
		if time.Now().Sub(start).Minutes() > 2 {
			return "", errors.New("Failed to retrieve argocd host")
		}
	}
	s.Stop()
	return argoHost, err
}

var installCmd = &cobra.Command{
	Use:   "install",
	Short: "Install gitops codefresh",
	Long:  `Install gitops codefresh`,
	RunE: func(cmd *cobra.Command, args []string) error {
		logger.Success("This installer will guide you through the Codefresh Gitops controller installation")
		codefreshApi := codefresh.New(&codefresh.ClientOptions{
			Host: installCmdOptions.Codefresh.Host,
			Auth: codefresh.AuthOptions{
				Token: installCmdOptions.Codefresh.Auth.Token,
			},
		})
		contexts, err := git.GetAvailableContexts(codefreshApi.Contexts())
		clustersList, err := clusters.GetAvailableClusters(codefreshApi.Clusters())
		_ = questionnaire.AskAboutClusters(&installCmdOptions, clustersList)
		_ = questionnaire.AskAboutGitContext(&installCmdOptions, contexts)
		_ = questionnaire.AskAboutGitRepo(&installCmdOptions)

		argoToken, err := argo.GetToken(DEFAULT_USER_NAME, "aa", "https://34.122.47.41")
		//argoToken := "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MDg1NzU5MDAsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTYwODU3NTkwMCwic3ViIjoiYWRtaW4ifQ.nQyhVfOIrjCr8oKJxMKBMlXfHr8JE42KNvunYc3cptA"
		argoHost1:="https://34.122.47.41"
		argoClientOptions := argo.ClientOptions{Auth: argo.AuthOptions{Token: argoToken}, Host: argoHost1}
		argoApi := argo.New(&argoClientOptions)



		err = clusters.ImportFromCodefresh(installCmdOptions.Codefresh.Clusters, codefreshApi.Clusters(), argoApi.Clusters())
		if installCmdOptions.Git.RepoUrl != "" {
			logger.Info(fmt.Sprint("Creating repositories..."))
			err = argoApi.Repository().CreateRepository(argo.CreateRepositoryOpt{
				Repo: installCmdOptions.Git.RepoUrl,
				Username: installCmdOptions.Git.Auth.Pass,
				Password: installCmdOptions.Git.Auth.Pass,
			})
			if err != nil {
				// @todo - retry url passing
				return failInstallation(fmt.Sprintf("Can't manage access to git repo: \"%s\"", err.Error()))
			}
		}


		logger.Success(fmt.Sprintf("Successfully installed codefresh gitops controller, host: %s%", argoHost1))
		return nil
	},
}

func init() {
	rootCmd.AddCommand(installCmd)
	flags := installCmd.Flags()

	flags.StringVar(&installCmdOptions.Codefresh.Host, "codefresh-host", "", "Codefresh host")
	flags.StringVar(&installCmdOptions.Codefresh.Auth.Token, "codefresh-token", "", "Codefresh api token")

	flags.StringVar(&installCmdOptions.Argo.Password, "set-argo-password", "", "Set password for admin user of new argocd installation")
	flags.StringVar(&installCmdOptions.Kube.Namespace, "kube-namespace", "argocd", "Namespace in Kubernetes cluster")
	flags.StringVar(&installCmdOptions.Kube.ManifestPath, "install-manifest", "", "Url of argocd install manifest")

	var kubeConfigPath string
	currentUser, _ := user.Current()
	if currentUser != nil {
		kubeConfigPath = os.Getenv("KUBECONFIG")
		if kubeConfigPath == "" {
			kubeConfigPath = path.Join(currentUser.HomeDir, ".kube", "config")
		}
	}

	flags.StringVar(&installCmdOptions.Kube.ConfigPath, "kube-config-path", kubeConfigPath, "Path to kubeconfig file (default is $HOME/.kube/config)")
	flags.StringVar(&installCmdOptions.Kube.Context, "kube-context-name", viper.GetString("kube-context"), "Name of the kubernetes context on which Argo agent should be installed (default is current-context) [$KUBE_CONTEXT]")

}

func sendControllerInstalledEvent(status string, msg string) {

}

func failInstallation(msg string) error {
	sendControllerInstalledEvent(FAILED, msg)
	return errors.New(msg)
}
