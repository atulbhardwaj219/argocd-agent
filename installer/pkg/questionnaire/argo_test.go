package questionnaire

import (
	"errors"
	"github.com/codefresh-io/argocd-listener/installer/pkg/install/entity"
	"github.com/codefresh-io/argocd-listener/installer/pkg/kube"
	core "k8s.io/api/core/v1"
	apixv1beta1client "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"testing"
)

var _ = func() bool {
	testing.Init()
	return true
}()

var GetArgoServerSvcFunc func() (core.Service, error)

type MockKube struct {
}

func NewKubeClient() kube.Kube {
	return &MockKube{}
}

func (k *MockKube) GetAutogeneratedPassword() (string, error) {
	return "", nil
}

func (k *MockKube) CreateNamespace(namespaceName string) error {
	return nil
}

func (k *MockKube) GetService(labelSelector string) (*core.Service, error) {
	return nil, nil
}

func (k *MockKube) UpdateService(svc *core.Service) error {
	return nil
}

func (k *MockKube) GetArgoServerHost() (string, error) {
	return "", nil
}

func (k *MockKube) GetLoadBalancerHost(svc core.Service) (string, error) {
	return "localhost", nil
}

func (k *MockKube) buildClient() (*kubernetes.Clientset, *apixv1beta1client.ApiextensionsV1beta1Client, error) {
	return nil, nil, nil
}

func (k *MockKube) GetArgoServerSvc(namespace string) (core.Service, error) {
	return GetArgoServerSvcFunc()
}

func (k *MockKube) GetNamespaces() ([]string, error) {
	return nil, nil
}

func (k *MockKube) GetClientSet() *kubernetes.Clientset {
	return nil
}
func (k *MockKube) GetCrdClientSet() *apixv1beta1client.ApiextensionsV1beta1Client {
	return nil
}

func (k *MockKube) CreateObjects(manifestPath string) error {
	return nil
}

func (k *MockKube) DeleteObjects(manifestPath string) error {

	return nil
}

type MockPrompt struct {
}

func (p *MockPrompt) InputWithDefault(target *string, label string, defaultValue string) error {
	*target = defaultValue
	return nil
}

func (p *MockPrompt) InputPassword(target *string, label string) error {
	return nil
}

func (p *MockPrompt) Input(target *string, label string) error {
	return nil
}

func (p *MockPrompt) Confirm(label string) (error, bool) {
	return nil, false
}

func (p *MockPrompt) Multiselect(items []string, label string) (error, []string) {
	return nil, nil
}

func (p *MockPrompt) Select(items []string, label string) (error, string) {
	return nil, ""
}

func TestAskAboutArgoCredentials(t *testing.T) {

	GetArgoServerSvcFunc = func() (service core.Service, e error) {
		return core.Service{
			TypeMeta:   v1.TypeMeta{},
			ObjectMeta: v1.ObjectMeta{},
			Spec:       core.ServiceSpec{},
			Status:     core.ServiceStatus{},
		}, errors.New("cant find service with lb")
	}

	installCmdOptions := &entity.InstallCmdOptions{
		Argo: struct {
			Host     string
			Username string
			Password string
			Token    string
			Update   bool
			FailFast bool
		}{Host: "https://localhost", Username: "test", Password: "test", Token: "test", Update: false},
	}

	q := &ArgoQuestionnaire{prompt: &MockPrompt{}}

	_ = q.AskAboutArgoCredentials(installCmdOptions, nil)

	if installCmdOptions.Argo.Host != "https://localhost" {
		t.Errorf("Argocd host shouldnt be changed in case if it is passed from cli")
	}
}

func TestAskAboutArgoCredentialsFromLB(t *testing.T) {
	GetArgoServerSvcFunc = func() (service core.Service, e error) {
		return core.Service{
			TypeMeta:   v1.TypeMeta{},
			ObjectMeta: v1.ObjectMeta{},
			Spec:       core.ServiceSpec{},
			Status:     core.ServiceStatus{},
		}, errors.New("cant find service with lb")
	}

	installCmdOptions := &entity.InstallCmdOptions{
		Argo: struct {
			Host     string
			Username string
			Password string
			Token    string
			Update   bool
			FailFast bool
		}{Username: "test", Password: "test", Token: "test", Update: false},
	}

	q := &ArgoQuestionnaire{prompt: &MockPrompt{}}

	err := q.AskAboutArgoCredentials(installCmdOptions, NewKubeClient())
	if err != nil || installCmdOptions.Argo.Host != "https://argocd-server" {
		t.Errorf("Wrong argo host ")
	}
}

func TestAskAboutArgoCredentialsFromLBWithError(t *testing.T) {
	GetArgoServerSvcFunc = func() (service core.Service, e error) {
		return core.Service{
			TypeMeta:   v1.TypeMeta{},
			ObjectMeta: v1.ObjectMeta{},
			Spec: core.ServiceSpec{
				Type: "ClusterIp",
			},
			Status: core.ServiceStatus{},
		}, nil
	}

	installCmdOptions := &entity.InstallCmdOptions{
		Argo: struct {
			Host     string
			Username string
			Password string
			Token    string
			Update   bool
			FailFast bool
		}{Username: "test", Password: "test", Token: "test", Update: false},
	}
	q := &ArgoQuestionnaire{prompt: &MockPrompt{}}
	err := q.AskAboutArgoCredentials(installCmdOptions, &MockKube{})
	if err != nil || installCmdOptions.Argo.Host != "https://argocd-server" {
		t.Errorf("Wrong argo host ")
	}
}

func TestAskAboutArgoCredentialsFromLBWithoutError(t *testing.T) {
	GetArgoServerSvcFunc = func() (service core.Service, e error) {
		return core.Service{
			TypeMeta:   v1.TypeMeta{},
			ObjectMeta: v1.ObjectMeta{},
			Spec: core.ServiceSpec{
				Type: "LoadBalancer",
			},
			Status: core.ServiceStatus{},
		}, nil
	}

	installCmdOptions := &entity.InstallCmdOptions{
		Argo: struct {
			Host     string
			Username string
			Password string
			Token    string
			Update   bool
			FailFast bool
		}{Username: "test", Password: "test", Token: "test", Update: false},
	}
	q := &ArgoQuestionnaire{prompt: &MockPrompt{}}
	err := q.AskAboutArgoCredentials(installCmdOptions, &MockKube{})
	if err != nil || installCmdOptions.Argo.Host != "https://localhost" {
		t.Errorf("Argo host should be \"https://localhost\", but %s", installCmdOptions.Argo.Host)
	}
}
